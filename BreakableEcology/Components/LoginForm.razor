@inject NavigationManager nav

<EditForm class="login-form" Model="model" method="post" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
    <DataAnnotationsValidator />

    <fieldset class="login-form__fieldset">
        <legend class="login-form__legend">Вход в аккаунт</legend>

        <div class="login-form__element login-form__element_telephone">
            <InputMask name="telephone" @bind-Value="@model.Telephone" data-mask="+7 (000) 000-00-00" class="login-form__input" />
            <label class=@((String.IsNullOrEmpty(model.Telephone)) ? "login-form__label": "login-form__label has-value") for="telephone">Телефон</label>
            <div class="login-form__error">
                <ValidationMessage For="@(() => model.Telephone)" />
            </div>
        </div>

        <div class="login-form__element login-form__element_password">
            <InputText name="password" @bind-Value="@model.Password" class="login-form__input" type="password" />
            <label class=@((String.IsNullOrEmpty(model.Password)) ? "login-form__label": "login-form__label has-value") for="password">Пароль</label>
            <div class="login-form__error">
                <ValidationMessage For="@(() => model.Password)" />
            </div>
        </div>

        <button type="button" role="link" aria-label="Зарегистрироваться" class="login-form__link">Зарегистрироваться</button>
        <button type="submit" aria-label="Войти в аккаунт" class="login-form__button">Войти в аккаунт</button>
        <button class="login-form__close" type="button">&#128473;</button>
    </fieldset>

</EditForm>

@code {
    private LoginModel model = new();

    [Parameter]
    public EventCallback OnClose { get; set; }

    private void OnValidSubmit()
    {
        AppData.Authorized = true;
        nav.NavigateTo("/");
        StateHasChanged();
    }

    private void OnInvalidSubmit() { }
}
